{
    "description": "Autonomous Workflow for YouTube",
    "summary_method": "last",
    "user_id": "guestuser@gmail.com",
    "version": "0.0.1",
    "name": "Youtube Blog Workflow",
    "type": "autonomous",
    "sample_tasks": [],
    "agents": [
        {
            "agent": {
                "version": "0.0.1",
                "type": "userproxy",
                "config": {
                    "name": "user_proxy",
                    "human_input_mode": "NEVER",
                    "max_consecutive_auto_reply": 25,
                    "system_message": "You are a helpful assistant",
                    "is_termination_msg": null,
                    "code_execution_config": "local",
                    "default_auto_reply": "TERMINATE",
                    "description": "User Proxy Agent Configuration",
                    "llm_config": false,
                    "admin_name": "Admin",
                    "messages": [],
                    "max_round": 100,
                    "speaker_selection_method": "auto",
                    "allow_repeat_speaker": true
                },
                "task_instruction": null,
                "user_id": "guestuser@gmail.com",
                "skills": [],
                "models": [],
                "agents": []
            },
            "link": {
                "sequence_id": 0,
                "workflow_id": 4,
                "agent_id": 1,
                "agent_type": "sender"
            }
        },
        {
            "agent": {
                "version": "0.0.1",
                "type": "assistant",
                "config": {
                    "name": "primary_assistant",
                    "description": "Primary Assistant",
                    "llm_config": {
                        "config_list": [
                            {
                                "model": "llama-3.1-70b-versatile",
                                "api_type": "open_ai",
                                "api_version": null,
                                "version": "0.0.1",
                                "base_url": "https://api.groq.com/openai/v1"
                            }
                        ],
                        "temperature": 0.1,
                        "timeout": 600,
                        "cache_seed": null,
                        "max_tokens": 4000
                    },
                    "human_input_mode": "NEVER",
                    "max_consecutive_auto_reply": 25,
                    "code_execution_config": "none",
                    "system_message": "You are a helpful AI assistant. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user. If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user. If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible. When everything is done store the final output in a markdown and reply 'TERMINATE' in the end."
                },
                "task_instruction": null,
                "user_id": "guestuser@gmail.com",
                "skills": [
                    {
                        "user_id": "guestuser@gmail.com",
                        "version": "0.0.1",
                        "name": "generate_youtube_transcript",
                        "content": "from typing import List\nimport uuid\nimport requests\nfrom pathlib import Path\nfrom youtube_transcript_api import YouTubeTranscriptApi\n\ndef generate_and_save_transcript(video_url: str) -> str:\n    \"\"\"\n    Function to generate and save a transcript from a YouTube video URL. \n    The transcript is retrieved using the YouTube Transcript API and saved to a text file.\n\n    :param video_url: The URL of the YouTube video.\n    :return: The filename of the saved transcript.\n    \"\"\"\n    \n    # Extract the video ID from the URL\n    video_id = video_url.split(\"v=\")[-1]\n\n    # Fetch the transcript using the YouTubeTranscriptApi\n    try:\n        transcript = YouTubeTranscriptApi.get_transcript(video_id)\n    except Exception as e:\n        print(f\"An error occurred while retrieving the transcript: {e}\")\n        return \"\"\n\n    # Convert the transcript from list of dictionaries to plain text\n    transcript_text = \"\\n\".join([item['text'] for item in transcript])\n\n    # Generate a random UUID as the file name\n    file_name = str(uuid.uuid4()) + \".txt\"\n    file_path = Path(file_name)\n\n    # Save the transcript to a file\n    try:\n        with open(file_path, \"w\", encoding=\"utf-8\") as file:\n            file.write(transcript_text)\n            print(f\"Transcript saved to {file_path}\")\n    except Exception as e:\n        print(f\"An error occurred while saving the transcript: {e}\")\n        return \"\"\n\n    # Return the filename of the saved transcript\n    return str(file_path)\n\n# Example usage of the function:\n# generate_and_save_transcript(\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\")\n",
                        "description": "Generate a youtube based on a user's query.",
                        "libraries": []
                    },
                    {
                        "user_id": "guestuser@gmail.com",
                        "version": "0.0.1",
                        "name": "generate_and_save_markdown",
                        "content": "from typing import List, Dict, Optional\nfrom pathlib import Path\n\ndef generate_and_save_markdown(\n    sections: List[Dict[str, Optional[str]]], \n    output_file: str = \"report.md\", \n    report_title: str = \"Markdown Report\"\n) -> None:\n    \"\"\"\n    Function to generate a Markdown report file.\n\n    :param sections: A list of sections where each section is represented by a dictionary containing:\n                     - title: The title of the section.\n                     - level: The heading level (e.g., \"title\", \"h1\", \"h2\").\n                     - content: The content or body text of the section.\n                     - image: (Optional) The URL or local path to the image.\n    :param output_file: The name of the output Markdown file. (default is \"report.md\")\n    :param report_title: The title of the report. (default is \"Markdown Report\")\n    :return: None\n    \"\"\"\n\n    # Create or overwrite the markdown file\n    with open(output_file, \"w\") as md_file:\n        # Write the report title as the main heading\n        md_file.write(f\"# {report_title}\\n\\n\")\n\n        # Process each section\n        for section in sections:\n            title = section.get(\"title\", \"\")\n            level = section.get(\"level\", \"h1\")\n            content = section.get(\"content\", \"\")\n            image = section.get(\"image\", \"\")\n\n            # Determine the heading level\n            if level == \"title\":\n                md_file.write(f\"# {title}\\n\\n\")\n            elif level == \"h1\":\n                md_file.write(f\"## {title}\\n\\n\")\n            elif level == \"h2\":\n                md_file.write(f\"### {title}\\n\\n\")\n            else:\n                md_file.write(f\"#### {title}\\n\\n\")\n\n            # Add the content\n            if content:\n                md_file.write(f\"{content}\\n\\n\")\n\n            # Add the image if provided\n            if image:\n                md_file.write(f\"![{title}]({image})\\n\\n\")\n\n        print(f\"Markdown report saved as {output_file}\")\n\n# # Example usage\n# sections = [\n#     {\n#         \"title\": \"Introduction - Early Life\",\n#         \"level\": \"h1\",\n#         \"image\": \"https://picsum.photos/536/354\",\n#         \"content\": (\"Marie Curie was born on 7 November 1867 in Warsaw, Poland. \"\n#                     \"She was the youngest of five children. Both of her parents were teachers. \"\n#                     \"Her father was a math and physics instructor, and her mother was the head of a private school. \"\n#                     \"Marie's curiosity and brilliance were evident from an early \n",
                        "description": "Generate and save markdown based on a user's query.",
                        "libraries": []
                    }
                ],
                "models": [
                    {
                        "user_id": "guestuser@gmail.com",
                        "model": "llama-3.1-70b-versatile",
                        "api_type": "open_ai",
                        "api_version": null,
                        "version": "0.0.1",
                        "base_url": "https://api.groq.com/openai/v1",
                        "description": "Groq Model"
                    }
                ],
                "agents": []
            },
            "link": {
                "sequence_id": 0,
                "workflow_id": 4,
                "agent_id": 7,
                "agent_type": "receiver"
            }
        }
    ]
}